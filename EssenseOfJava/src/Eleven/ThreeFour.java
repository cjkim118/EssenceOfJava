package Eleven;
/*
 * [11-3] 다음 중 ArrayList에서 제일 비용이 많이 드는 작업은? 단, 작업도중에 ArrayList의 크기 변경이 발생하지 않는다고 가정한다.
 * a. 첫 번째 요소 삭제
 * b. 마지막 요소 삭제
 * c. 마지막에 새로운 요소 추가 
 * d. 중간에 새로운 요소 추가
 * 
 * 정답 : a
 * 나 나름의 해설: arraylist는 원소 한개가 삭제/추가 되었을 경우 그 아래에 있는 원소들까지 수정을 해야 한다.
 * 그렇기 때문에  삭제 혹은 추가해야할 원소 뒤에 남은 원소가 많을경우 그만큼 드는 비용이 많다.
 * 
 * 책 해설: ArrayList는 배열을 기반으로 하고, 배열은 크기를 변경할 수 없기 때문에 저장할 공간이 부족하면 새로운 배열을 만들고 내용을 복사해야하므로 많은 비용이 든다.
그리고 배열의 중간에 새로운 요소를 추가 또는 삭제하는 것은 다른 요소들을 이동시켜 야하기 때문에 배열을 새로 생성하는 것보다는 적지만 역시 비용이 많이 드는 작업이다.
특히 배열의 첫 번째 요소를 삭제하면, 빈자리를 채우기 위해 나머지 모든 요소들을 이 동시켜야 하기 때문에 많은 비용이 든다.
반면에 ArrayList의 마지막에 요소를 추가 또는 삭제하는 것은 다른 요소들을 이동시킬 필요가 없기 때문에 아주 적은 비용만으로 처리가 가능하다.
 * 
 * [11-4] LinkedList클래스는 이름과 달리 실제로는 이중 원형 연결리스트(doubly circular linked list)로 구현되어 있다. 
 * 		  LinkedList인스턴스를 생성하고 11개의 요소를 추가했을 때, 
 * 		  이 11개의 요소 중 접근시간(access time)이 가장 오래 걸리는 요소는 몇 번째 요소인가?
 * 
 * 	정답:6번째 요
 * 	해설: arraylist는 실상 이중원형 연결리스트 이기 때문에 맨마지막 원소와 두번째 원소의 접근 시간은 같다.
 * 		 그렇기 때문에 제일 멀리 이동해야 하는것은 가운데 원소 이다.
 */
public class ThreeFour {

}
